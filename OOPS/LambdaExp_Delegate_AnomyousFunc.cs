using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace OOPS.LambdaExp_Delegate_AnomyousFunc
{
    /*
    Lambda expressions in C# are used like anonymous functions, with the difference that in Lambda expressions you don’t need 
    to specify the type of the value that you input thus making it more flexible to use.
    
    The ‘=>’ is the lambda operator which is used in all lambda expressions. 
    The Lambda expression is divided into two parts, the left side is the input and the right is the expression. 
    */

    public class LambdaExpression
    {
        public void Square()
        {
            //Anonymous types are types that are generated by compiler at run time. When we create a anonymous type we do not specify a name. 
            //We just write properties names and their values. Compiler at runtime create these properties and assign values to them.

            //Below is an example of type (Anonymous) and perfectly valid statement;
            var person = new { Name = "Foo", Length = 21 };
            var TYPE = person.GetType(); //here it will Anonymous Type i.e. System.RuntimeType

            /*
             There are some restrictions on Anonymous types as well:
                - Anonymous types can not implement interfaces.
                - Anonymous types can not specify any methods.
                - We can not define static members.
                - All defined properties must be initialized.
                - We can only define public fields.
             */




            //----------------------------------------------------------------------------
            List<int> numbers = new List<int>() { 36, 71, 12, 15, 29, 18, 27, 17, 9, 34 };

            // Using lambda expression to calculate square of each value in the list 
            var square = numbers.Select(x => x * x);

            foreach (var item in square)
            {
                Console.WriteLine("Unsorted Square : " + item);
            }

            square.OrderBy(x => x).ToList();

            foreach (var item in square)
            {
                Console.WriteLine("Sorted Square : " + item);
            }
        }
    }


    public class AsyncLambda
    {
        public async Task<TOut> AsyncWork<TIn, TOut>(TIn input, Func<TIn, Task<TOut>> func)
        {
            return await func.Invoke(input);
        }

        public async Task<string> GetString(int value)
        {
            await Task.Run(() => Console.WriteLine("We are doing something"));
            return value.ToString(CultureInfo.InvariantCulture);
        }

        public async Task Call()
        {
            string output = await AsyncWork(30, GetString);
        }
    }


    //An anonymous method is a method which doesn’t contain any name which is introduced in C# 2.0. 
    //It is useful when the user wants to create an inline method and also wants to pass parameter in the anonymous method like other methods. 
    //An Anonymous method is defined using the delegate keyword and the user can assign this method to a variable of the delegate type.
    public class AnanoymousMethods
    {
        public delegate void AreaPointer(int r);
        public AreaPointer areapointer;

        public delegate double CircumferencePointer(int r);
        public CircumferencePointer circumpointer;

        //ctor
        public AnanoymousMethods()
        {
            areapointer = new AreaPointer(delegate(int radius)
                                                        {
                                                            double area = 3.1415 * radius * radius;
                                                            Console.WriteLine("Area :: " + area);
                                                        });


            circumpointer = new CircumferencePointer(delegate (int radius)
                                                                        {
                                                                            double circumference = 2 * 3.1415 * radius;
                                                                            Console.WriteLine("Circumference :: " + circumference);
                                                                            return circumference;
                                                                        });

        }
    }


    public class Delegates
    {
        public delegate void Areapointer(int r);
        public static Areapointer areapointer = CalculateArea;


        public static void CalculateArea(int radius)
        {
            double area = 3.1415 * radius * radius;
            Console.WriteLine("Area :: " + area);
        }

        public static void Do(int x)
        {
            
        }
    }

    public class FuncDelegate
    {
        public void Express()
        {
            //when it is require to have input and output from a function then this Func is used Func<input, output>

            Func<int, Double> area = r => (3.1415 * r * r);
            Console.WriteLine("Area : " + area(10));

            Func<Double, Double> circum = r => (3.1415 * r * r);
            Console.WriteLine("Circumference : " + circum(10));
        }
    }

    public class ActionDelegate
    {
        public void Express()
        {
            ////when it is require to have input and no output from a function then this Action is used Action<input>
            Action<string> action = a => Console.WriteLine(a);
            action("this is sample text");
        }
    }

    public class PredicateDelegate
    {
        public void Express()
        {
            ////when it is require to have input and boolean output from a function then this Action is used Predicate<input>
            Predicate<string> pred = p => (p.Length > 5);
            Console.WriteLine(pred("Sample_Text"));

            //Using the above predicate to a list of string to find out the length of items with length greater than 5
            List<string> olist = new List<string>();
            olist.Add("amit");
            olist.Add("swati");
            olist.Add("shelke");
            olist.Add("riyanshi");

            int result = olist.RemoveAll(pred);
            Console.WriteLine("Total Items Removed : " + result);
        }
    }




    public class Client
    {
        public static void Execute()
        {

            Console.WriteLine("************************** Lambda Expression *********************************");
            LambdaExpression le = new LambdaExpression();
            le.Square();


            Console.WriteLine("************************** Async Lambda  *********************************");
            AsyncLambda al = new AsyncLambda();
            al.Call();


            Console.WriteLine("************************** Delegates *********************************");
            Delegates.areapointer.Invoke(15);


            Console.WriteLine("************************** Ananoymous Methods *********************************");
            AnanoymousMethods am = new AnanoymousMethods();
            am.areapointer(25);
            am.circumpointer(30);


            Console.WriteLine("************************** Generic Delegate Func<> *********************************");
            FuncDelegate gd = new FuncDelegate();
            gd.Express();

            Console.WriteLine("************************** Generic Delegate Action<> *********************************");
            ActionDelegate ad = new ActionDelegate();
            ad.Express();

            Console.WriteLine("************************** Generic Delegate Predicate<> *********************************");
            PredicateDelegate pd = new PredicateDelegate();
            pd.Express();


            Console.ReadKey();
        }
    }
}
