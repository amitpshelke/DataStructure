using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Microsoft.Win32;
using System;

namespace DataProcessorService
{
    public static class DebugLog
    {
        private static string FolderPath { get; set; }  //Read it from Config
        private static int IsDebugLogON { get; set; }  //Read it from Config  0 for OFF, 1 for ON
        private static string CommonPrefix { get; set; }  //Read it from Config
        private static int RestrictFileSize { get; set; }  //Read it from Config
        private static string AutogenFileName { get; set; }   //Autogenerated FileName


        static DebugLog()
        {
            //read config from xml
            GenerateLogFile();
        }


        private static void GenerateLogFile()
        {
            //read config from registry
            //Create this key manually HKCU\SOFTWARE\DebugLogSettings
            using (RegistryKey key = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\DebugLogSettings"))
            {
                IsDebugLogON = Convert.ToInt16(key.GetValue("IsDebugLogON"));
                FolderPath = Convert.ToString(key.GetValue("FolderPath"));
                CommonPrefix = Convert.ToString(key.GetValue("CommonPrefix"));
                RestrictFileSize = Convert.ToInt32(key.GetValue("RestrictFileSize")); //Max size to be 10 Mb
            }

            if (!string.IsNullOrEmpty(FolderPath) && Directory.Exists(FolderPath))
            {
                if (!File.Exists(Path.Combine(FolderPath, AutoGenerateFileName())))
                {
                    FileStream fs = File.Create(Path.Combine(FolderPath, AutoGenerateFileName()));
                    AutogenFileName = Path.GetFileName(fs.Name);
                    fs.Close();
                    fs.Dispose();
                }
                else
                {
                    FileInfo fi = new FileInfo(AutogenFileName);
                    if (fi.Length > RestrictFileSize)  //10 MB
                    {
                        FileStream fs = File.Create(Path.Combine(FolderPath, AutoGenerateFileName(true)));
                        AutogenFileName = Path.GetFileName(fs.Name);
                    }
                }
            }
        }

        public static void Write(LogType logType, string className, string funcName, string message)
        {
            using (RegistryKey key = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\DebugLogSettings"))
                IsDebugLogON = Convert.ToInt16(key.GetValue("IsDebugLogON"));

            if (IsDebugLogON != 1) return;

            switch (logType)
            {
                case LogType.Debug: { WriteDebugLog(className, funcName, message); break; }
                case LogType.Error: { WriteErrorLog(className, funcName, message); break; }
            }
        }


        private static void WriteDebugLog(string className, string funcName, string message)
        {
            if (IsDebugLogON == 1)
            {
                if (!File.Exists(Path.Combine(FolderPath, AutogenFileName)))
                    GenerateLogFile();
                using (StreamWriter sw = new StreamWriter(Path.Combine(FolderPath, AutogenFileName), true))
                {
                    string LogLinePrefix = "DebugLog::" + DateTime.Now.ToShortDateString() + "|" + DateTime.Now.TimeOfDay;
                    sw.WriteLine(LogLinePrefix + "==>" + className + "." + funcName + "==>" + message);
                }
            }
        }
        private static void WriteErrorLog(string className, string funcName, string message)
        {
            if (IsDebugLogON == 1)
            {
                if (!File.Exists(Path.Combine(FolderPath, AutogenFileName)))
                    GenerateLogFile();
                using (StreamWriter sw = new StreamWriter(Path.Combine(FolderPath, AutogenFileName), true))
                {
                    string LogLinePrefix = "ErrorLog::" + DateTime.Now.ToShortDateString() + "|" + DateTime.Now.TimeOfDay;
                    sw.WriteLine(LogLinePrefix + "==>" + className + "." + funcName + "==>" + message);
                }

            }
        }

        private static string AutoGenerateFileName(bool addSuffix = false)
        {
            string UniqueFileName = "";
            try
            {
                string DateToday = DateTime.Today.Year + "_" + DateTime.Today.Month + "_" + DateTime.Today.Day + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes + "_" + DateTime.Now.TimeOfDay.Seconds;
                string UniqueSuffix = RandomString(6);
                string commonPrefix = CommonPrefix; //Read it from Config

                if (addSuffix)
                    UniqueFileName = AutogenFileName = commonPrefix + DateToday + UniqueSuffix;
                else
                    UniqueFileName = AutogenFileName = commonPrefix + DateToday + ".txt";
            }
            catch (Exception ex)
            {
                string error = ex.Message;
            }

            return UniqueFileName;
        }
        private static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            Random random = new Random();
            return new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());
        }
    }

    public enum LogType
    {
        Debug = 0,
        Error = 1
    }
}
